---
- name: Install webserver
  hosts: web
  become: true
  gather_facts: No
  vars:
    packages: [httpd,libselinux-python,libsemanage-python]
    nodejs_ip: 192.168.56.230

  tasks:
    - name: Install apache and required packages
      yum:
        name: '{{packages}}'
        state: latest


    - name: Adjust firewall for 80
      firewalld:
        port: 80/tcp
        permanent: yes
        state: enabled
      notify: restart firewalld
     


    - name: Set apache selinux
      seboolean:
        name: httpd_can_network_connect
        state: yes
        persistent: yes
    
    - name: deploy a template file 
      template:
        src: templates/template_nodejs.j2
        dest: /etc/httpd/conf.d/nodejs.conf

    - name: Start service httpd, if not started
      service:
        name: httpd
        state: restarted
        enabled: yes
      notify: httpd restart


  handlers:
    - name: restart firewalld
      service:
        name: firewalld
        state: restarted
        enabled: yes

    - name: httpd restart
      service:
        name: httpd
        state: restarted
        enabled: yes

               
- name: Implement nodeJS code with dependecies
  hosts: nodejs
  become: true
  gather_facts: No

  tasks:
    - name: Add repository (curl nodesource)
      script: ./st_nodeinstall.sh
  
    - name: Install required packages for nodejs
      package:
        name:
        - nodejs
        - gcc-c++
        - make
        - git
        state: latest

    - name: Install required npm package(s) 
      npm:
        name: supervisor
        global: yes

    - name: Implement nodejs code from git
      git:
        repo: https://github.com/KeleZsombor/ansible_docker_Vizsga.git
        dest: /nodejs/
        force: yes 

    - name: Copy prepared unit file (nodejsapp.servive)
      copy:
        src: ./nodejsapp.service
        dest: /usr/lib/systemd/system/nodejsapp.service
        owner: root
        group: root
        mode: '0644'

    - name: Adjust firewall for 8080
      firewalld:
        port: 8080/tcp
        permanent: yes
        state: enabled
      notify: restart firewalld

    - name: just force systemd to reread configs (2.4 and above)
      systemd:
        daemon_reload: yes

    - name: Start nodejsapp if not running
      systemd:
        state: started
        name: nodejsapp

  handlers:
    - name: restart firewalld
      service:
        name: firewalld
        state: restarted
        enabled: yes


- name: Install docker dependencies and docker task
  gather_facts: No
  hosts: nodejs
  become: true

  tasks:
    - name: install epel-release and pip
      yum:
        name: 
          - epel-release
          - python-pip
        state: latest

  
    
    - name: Install required pip packages (docker-py)
      pip:
        name: docker-py


    - name: Install required packages (yum-utilsm device, lvm2, git)
      package:
        name:
          - yum-utils 
          - device-mapper-persistent-data
          - lvm2 
          - git
        state: latest
 

    - name: Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docer-ce.repo
      become: yes

  

    - name: Install Docker
      package:
        name: docker-ce
        state: latest
      become: yes

    - name: Add user to docker group
      user:
        name: exam
        groups: docker
        append: yes
      become: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      become: yes 

    - name: Copy foler with dockerfile
      copy:
        src: ./dockercuccok
        dest: /
        owner: exam
        group: exam
        mode: '0644'

    - name: Build an image from Dockerfile
      docker_image:
        name: exam/nodeapp
        path: /dockercuccok/
        tag: latest
        source: build
        state: present
        timeout: 300

    - name: Start a container
      docker_container:
        name: exam_container
        image: exam/nodeapp
        published_ports: 8070:8070
        state: started

    - name: Adjust firewall for 8070
      firewalld:
        port: 8070/tcp
        permanent: yes
        state: enabled
      notify: restart firewalld

  handlers:
    - name: restart firewalld
      service:
        name: firewalld
        state: restarted
        enabled: yes
